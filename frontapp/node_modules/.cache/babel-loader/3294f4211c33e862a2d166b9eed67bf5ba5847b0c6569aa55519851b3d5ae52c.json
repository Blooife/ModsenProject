{"ast":null,"code":"var _jsxFileName = \"D:\\\\RiderProjects\\\\Modsen\\\\frontapp\\\\src\\\\components\\\\myEvents.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PostService from \"../services/post.service\";\nimport AuthService from \"../services/auth.service\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport handleRefresh from './refresh';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Events = () => {\n  _s();\n  const [privatePosts, setPrivatePosts] = useState([]);\n  const [refreshEvents, setRefreshEvents] = useState(false); // Состояние для обновления событий\n  const user = AuthService.getCurrentUser();\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    AuthService.getUsersEvents(user.user.id).then(response => {\n      setPrivatePosts(response.data);\n    }, async error => {\n      if (error.response == null) {\n        handleRefresh(user, navigate);\n      } else {\n        alert(error.response.data['ErrorMessage']);\n      }\n    });\n  }, [navigate, refreshEvents]); // Добавляем refreshEvents в зависимости\n\n  const handleUnregister = eventId => async e => {\n    e.preventDefault();\n    try {\n      await AuthService.unregisterFromEvent(user.user.id, eventId).then(() => {\n        setRefreshEvents(prev => !prev);\n      }, error => {\n        setErrorMessage(error.response.data['ErrorMessage']);\n      });\n    } catch (error) {\n      // Handle error\n      console.error(\"Error unregistering from event:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row row-cols-1 row-cols-md-3 g-4\",\n        children: privatePosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card border-primary\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/eventDetails/${post.id}`,\n                children: post.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `/pictures/${post.picture}`,\n              className: \"card-img-top\",\n              alt: post.name,\n              style: {\n                objectFit: \"cover\",\n                height: \"300px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: post.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleUnregister(post.id),\n                className: \"btn btn-danger\",\n                children: \"Unregister\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Events, \"lM2ldhClEnw14eWgSKeAoKQR5Eo=\", false, function () {\n  return [useNavigate];\n});\n_c = Events;\nexport default Events;\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["React","useState","useEffect","PostService","AuthService","useNavigate","Link","handleRefresh","jsxDEV","_jsxDEV","Events","_s","privatePosts","setPrivatePosts","refreshEvents","setRefreshEvents","user","getCurrentUser","errorMessage","setErrorMessage","navigate","getUsersEvents","id","then","response","data","error","alert","handleUnregister","eventId","e","preventDefault","unregisterFromEvent","prev","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","post","to","name","src","picture","alt","style","objectFit","height","description","onClick","_c","$RefreshReg$"],"sources":["D:/RiderProjects/Modsen/frontapp/src/components/myEvents.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PostService from \"../services/post.service\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport handleRefresh from './refresh';\r\n\r\nconst Events = () => {\r\n  const [privatePosts, setPrivatePosts] = useState([]);\r\n  const [refreshEvents, setRefreshEvents] = useState(false); // Состояние для обновления событий\r\n  const user = AuthService.getCurrentUser();\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    AuthService.getUsersEvents(user.user.id).then(\r\n      (response) => {\r\n        setPrivatePosts(response.data);\r\n      },\r\n      async (error) => {\r\n        if (error.response == null) {\r\n          handleRefresh(user, navigate);\r\n        }else{\r\n          alert(error.response.data['ErrorMessage']);\r\n        }          \r\n      }\r\n    );\r\n  }, [navigate, refreshEvents]); // Добавляем refreshEvents в зависимости\r\n\r\n  const handleUnregister = (eventId) => async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await AuthService.unregisterFromEvent(user.user.id, eventId).then(\r\n        () => {\r\n          setRefreshEvents((prev) => !prev); \r\n        },\r\n        (error) => {\r\n            setErrorMessage(error.response.data['ErrorMessage'])\r\n        },)        \r\n    } catch (error) {\r\n      // Handle error\r\n      console.error(\"Error unregistering from event:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mt-3\">\r\n        <h2>Events</h2>\r\n        <div className=\"row row-cols-1 row-cols-md-3 g-4\">\r\n          {privatePosts.map((post) => (\r\n            <div className=\"col\" key={post.id}>\r\n              <div className=\"card border-primary\">\r\n                <div className=\"card-header\">\r\n                  <Link to={`/eventDetails/${post.id}`}>{post.name}</Link>\r\n                </div>\r\n                <img\r\n                  src={`/pictures/${post.picture}`}\r\n                  className=\"card-img-top\"\r\n                  alt={post.name}\r\n                  style={{ objectFit: \"cover\", height: \"300px\" }}\r\n                />\r\n                <div className=\"card-body\">\r\n                  <p className=\"card-text\">{post.description}</p>\r\n                  <button\r\n                    onClick={handleUnregister(post.id)}\r\n                    className=\"btn btn-danger\"\r\n                  >\r\n                    Unregister\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Events;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}